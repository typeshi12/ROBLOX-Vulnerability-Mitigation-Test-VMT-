local vulnerable_rbx_functions = {
    ["VirtualInputManager.StartPlaying"] = game:GetService("VirtualInputManager").StartPlaying,
    ["VirtualInputManager.sendRobloxEvent"] = game:GetService("VirtualInputManager").sendRobloxEvent,
    ["AccountService.GetCredentialsHeaders"] = game:GetService("AccountService").GetCredentialsHeaders,
    ["AccountService.GetDeviceAccessToken"] = game:GetService("AccountService").GetDeviceAccessToken,
    ["AccountService.GetDeviceIntegrityToken"] = game:GetService("AccountService").GetDeviceIntegrityToken,
    ["AccountService.GetDeviceIntegrityTokenYield"] = game:GetService("AccountService").GetDeviceIntegrityTokenYield,
    ["AnalyticsService.FireInGameEconomyEvent"] = game:GetService("AnalyticsService").FireInGameEconomyEvent,
    ["AnalyticsService.FireLogEvent"] = game:GetService("AnalyticsService").FireLogEvent,
    ["AnalyticsService.FireEvent"] = game:GetService("AnalyticsService").FireEvent,
    ["AnalyticsService.FireCustomEvent"] = game:GetService("AnalyticsService").FireCustomEvent,
    ["AnalyticsService.LogEconomyEvent"] = game:GetService("AnalyticsService").LogEconomyEvent,
    ["AnimationFromVideoCreatorService.CreateJob"] = game:GetService("AnimationFromVideoCreatorService").CreateJob,
    ["AnimationFromVideoCreatorService.DownloadJobResult"] = game:GetService("AnimationFromVideoCreatorService").DownloadJobResult,
    ["AnimationFromVideoCreatorService.FullProcess"] = game:GetService("AnimationFromVideoCreatorService").FullProcess,
    ["CaptureService.DeleteCapture"] = game:GetService("CaptureService").DeleteCapture,
    ["CaptureService.GetCaptureFilePathAsync"] = game:GetService("CaptureService").GetCaptureFilePathAsync,
    ["CaptureService.CreatePostAsync"] = game:GetService("CaptureService").CreatePostAsync,
    ["CaptureService.SaveCaptureToExternalStorage"] = game:GetService("CaptureService").SaveCaptureToExternalStorage,
    ["CaptureService.SaveCapturesToExternalStorageAsync"] = game:GetService("CaptureService").SaveCapturesToExternalStorageAsync,
    ["CaptureService.GetCaptureSizeAsync"] = game:GetService("CaptureService").GetCaptureSizeAsync,
    ["CaptureService.GetCaptureStorageSizeAsync"] = game:GetService("CaptureService").GetCaptureStorageSizeAsync,
    ["CaptureService.PromptSaveCapturesToGallery"] = game:GetService("CaptureService").PromptSaveCapturesToGallery,
    ["CaptureService.PromptShareCapture"] = game:GetService("CaptureService").PromptShareCapture,
    ["CaptureService.RetrieveCaptures"] = game:GetService("CaptureService").RetrieveCaptures,
    ["CaptureService.SaveScreenshotCapture"] = game:GetService("CaptureService").SaveScreenshotCapture,
    ["InsertService.GetLocalFileContents"] = game:GetService("InsertService").GetLocalFileContents,
    ["SafetyService.TakeScreenshot"] = game:GetService("SafetyService").TakeScreenshot,
    ["HttpRbxApiService.PostAsync"] = game:GetService("HttpRbxApiService").PostAsync,
    ["HttpRbxApiService.PostAsyncFullUrl"] = game:GetService("HttpRbxApiService").PostAsyncFullUrl,
    ["HttpRbxApiService.GetAsyncFullUrl"] = game:GetService("HttpRbxApiService").GetAsyncFullUrl,
    ["HttpRbxApiService.GetAsync"] = game:GetService("HttpRbxApiService").GetAsync,
    ["HttpRbxApiService.RequestAsync"] = game:GetService("HttpRbxApiService").RequestAsync,
    ["HttpRbxApiService.RequestLimitedAsync"] = game:GetService("HttpRbxApiService").RequestLimitedAsync,
    ["MarketplaceService.PerformPurchaseV2"] = game:GetService("MarketplaceService").PerformPurchaseV2,
    ["MarketplaceService.PromptBundlePurchase"] = game:GetService("MarketplaceService").PromptBundlePurchase,
    ["MarketplaceService.PromptGamePassPurchase"] = game:GetService("MarketplaceService").PromptGamePassPurchase,
    ["MarketplaceService.PromptProductPurchase"] = game:GetService("MarketplaceService").PromptProductPurchase,
    ["MarketplaceService.PromptPurchase"] = game:GetService("MarketplaceService").PromptPurchase,
    ["MarketplaceService.PromptRobloxPurchase"] = game:GetService("MarketplaceService").PromptRobloxPurchase,
    ["MarketplaceService.PromptThirdPartyPurchase"] = game:GetService("MarketplaceService").PromptThirdPartyPurchase,
    ["MarketplaceService.GetRobuxBalance"] = game:GetService("MarketplaceService").GetRobuxBalance,
    ["MarketplaceService.PromptBulkPurchase"] = game:GetService("MarketplaceService").PromptBulkPurchase,
    ["MarketplaceService.PerformBulkPurchase"] = game:GetService("MarketplaceService").PerformBulkPurchase,
    ["MarketplaceService.PerformSubscriptionPurchase"] = game:GetService("MarketplaceService").PerformSubscriptionPurchase,
    ["MarketplaceService.PerformSubscriptionPurchaseV2"] = game:GetService("MarketplaceService").PerformSubscriptionPurchaseV2,
    ["MarketplaceService.PromptCollectiblesPurchase"] = game:GetService("MarketplaceService").PromptCollectiblesPurchase,
    ["MarketplaceService.PromptNativePurchaseWithLocalPlayer"] = game:GetService("MarketplaceService").PromptNativePurchaseWithLocalPlayer,
    ["MarketplaceService.PromptPremiumPurchase"] = game:GetService("MarketplaceService").PromptPremiumPurchase,
    ["MarketplaceService.PromptSubscriptionPurchase"] = game:GetService("MarketplaceService").PromptSubscriptionPurchase,
    ["MarketplaceService.GetUserSubscriptionPaymentHistoryAsync"] = game:GetService("MarketplaceService").GetUserSubscriptionPaymentHistoryAsync,
    ["GuiService.OpenBrowserWindow"] = game:GetService("GuiService").OpenBrowserWindow,
    ["GuiService.OpenNativeOverlay"] = game:GetService("GuiService").OpenNativeOverlay,
    ["GuiService.BroadcastNotification"] = game:GetService("GuiService").BroadcastNotification,
    ["GuiService.SetPurchasePromptIsShown"] = game:GetService("GuiService").SetPurchasePromptIsShown,
    ["OpenCloudService.HttpRequestAsync"] = game:GetService("OpenCloudService").HttpRequestAsync,
    ["OpenCloudService.GetApiV1"] = game:GetService("OpenCloudService").GetApiV1,
    ["OpenCloudService.InvokeAsync"] = game:GetService("OpenCloudService").InvokeAsync,
    ["OpenCloudService.RegisterOpenCloud"] = game:GetService("OpenCloudService").RegisterOpenCloud,
    ["DataModelPatchService.RegisterPatch"] = game:GetService("DataModelPatchService").RegisterPatch,
    ["DataModelPatchService.UpdatePatch"] = game:GetService("DataModelPatchService").UpdatePatch,
    ["EventIngestService.SendEventDeferred"] = game:GetService("EventIngestService").SendEventDeferred,
    ["EventIngestService.SetRBXEvent"] = game:GetService("EventIngestService").SetRBXEvent,
    ["EventIngestService.SetRBXEventStream"] = game:GetService("EventIngestService").SetRBXEventStream,
    ["EventIngestService.SendEventImmediately"] = game:GetService("EventIngestService").SendEventImmediately,
    ["CoreScriptSyncService.GetScriptFilePath"] = game:GetService("CoreScriptSyncService").GetScriptFilePath,
    ["ScriptContext.AddCoreScriptLocal"] = game:GetService("ScriptContext").AddCoreScriptLocal,
    ["ScriptContext.SaveScriptProfilingData"] = game:GetService("ScriptContext").SaveScriptProfilingData,
    ["ScriptProfilerService.SaveScriptProfilingData"] = game:GetService("ScriptProfilerService").SaveScriptProfilingData,
    ["BrowserService.EmitHybridEvent"] = game:GetService("BrowserService").EmitHybridEvent,
    ["BrowserService.OpenWeChatAuthWindow"] = game:GetService("BrowserService").OpenWeChatAuthWindow,
    ["BrowserService.ExecuteJavaScript"] = game:GetService("BrowserService").ExecuteJavaScript,
    ["BrowserService.OpenBrowserWindow"] = game:GetService("BrowserService").OpenBrowserWindow,
    ["BrowserService.OpenNativeOverlay"] = game:GetService("BrowserService").OpenNativeOverlay,
    ["BrowserService.ReturnToJavaScript"] = game:GetService("BrowserService").ReturnToJavaScript,
    ["BrowserService.CopyAuthCookieFromBrowserToEngine"] = game:GetService("BrowserService").CopyAuthCookieFromBrowserToEngine,
    ["BrowserService.SendCommand"] = game:GetService("BrowserService").SendCommand,
    ["MessageBusService.Call"] = game:GetService("MessageBusService").Call,
    ["MessageBusService.GetLast"] = game:GetService("MessageBusService").GetLast,
    ["MessageBusService.GetMessageId"] = game:GetService("MessageBusService").GetMessageId,
    ["MessageBusService.GetProtocolMethodRequestMessageId"] = game:GetService("MessageBusService").GetProtocolMethodRequestMessageId,
    ["MessageBusService.GetProtocolMethodResponseMessageId"] = game:GetService("MessageBusService").GetProtocolMethodResponseMessageId,
    ["MessageBusService.MakeRequest"] = game:GetService("MessageBusService").MakeRequest,
    ["MessageBusService.Publish"] = game:GetService("MessageBusService").Publish,
    ["MessageBusService.PublishProtocolMethodRequest"] = game:GetService("MessageBusService").PublishProtocolMethodRequest,
    ["MessageBusService.PublishProtocolMethodResponse"] = game:GetService("MessageBusService").PublishProtocolMethodResponse,
    ["MessageBusService.Subscribe"] = game:GetService("MessageBusService").Subscribe,
    ["MessageBusService.SubscribeToProtocolMethodRequest"] = game:GetService("MessageBusService").SubscribeToProtocolMethodRequest,
    ["MessageBusService.SubscribeToProtocolMethodResponse"] = game:GetService("MessageBusService").SubscribeToProtocolMethodResponse,
    ["AppUpdateService.DisableDUARAndOpenSurvey"] = game:GetService("AppUpdateService").DisableDUARAndOpenSurvey,
    ["AppUpdateService.DisableDUAR"] = game:GetService("AppUpdateService").DisableDUAR,
    ["AppUpdateService.PerformManagedUpdate"] = game:GetService("AppUpdateService").PerformManagedUpdate,
    ["AssetService.RegisterUGCValidationFunction"] = game:GetService("AssetService").RegisterUGCValidationFunction,
    ["MessagingService.PublishAsync"] = game:GetService("MessagingService").PublishAsync,
    ["MessagingService.SubscribeAsync"] = game:GetService("MessagingService").SubscribeAsync,
    ["ContentProvider.SetBaseUrl"] = game:GetService("ContentProvider").SetBaseUrl,
    ["AppStorageService.Flush"] = game:GetService("AppStorageService").Flush,
    ["AppStorageService.GetItem"] = game:GetService("AppStorageService").GetItem,
    ["AppStorageService.SetItem"] = game:GetService("AppStorageService").SetItem,
    ["IXPService.GetBrowserTrackerLayerVariables"] = game:GetService("IXPService").GetBrowserTrackerLayerVariables,
    ["IXPService.GetRegisteredUserLayersToStatus"] = game:GetService("IXPService").GetRegisteredUserLayersToStatus,
    ["IXPService.GetUserLayerVariables"] = game:GetService("IXPService").GetUserLayerVariables,
    ["IXPService.GetUserStatusForLayer"] = game:GetService("IXPService").GetUserStatusForLayer,
    ["IXPService.InitializeUserLayers"] = game:GetService("IXPService").InitializeUserLayers,
    ["IXPService.LogBrowserTrackerLayerExposure"] = game:GetService("IXPService").LogBrowserTrackerLayerExposure,
    ["IXPService.LogUserLayerExposure"] = game:GetService("IXPService").LogUserLayerExposure,
    ["IXPService.RegisterUserLayers"] = game:GetService("IXPService").RegisterUserLayers,
    ["HttpService.RequestInternal"] = game:GetService("HttpService").RequestInternal,
    ["HttpService.GetAsync"] = game:GetService("HttpService").GetAsync,
    ["HttpService.RequestAsync"] = game:GetService("HttpService").RequestAsync,
    ["HttpService.PostAsync"] = game:GetService("HttpService").PostAsync,
    ["HttpService.SetHttpEnabled"] = game:GetService("HttpService").SetHttpEnabled,
    ["SessionService.AcquireContextFocus"] = game:GetService("SessionService").AcquireContextFocus,
    ["SessionService.GenerateSessionInfoString"] = game:GetService("SessionService").GenerateSessionInfoString,
    ["SessionService.GetCreatedTimestampUtcMs"] = game:GetService("SessionService").GetCreatedTimestampUtcMs,
    ["SessionService.GetMetadata"] = game:GetService("SessionService").GetMetadata,
    ["SessionService.GetRootSID"] = game:GetService("SessionService").GetRootSID,
    ["SessionService.GetSessionTag"] = game:GetService("SessionService").GetSessionTag,
    ["SessionService.IsContextFocused"] = game:GetService("SessionService").IsContextFocused,
    ["SessionService.ReleaseContextFocus"] = game:GetService("SessionService").ReleaseContextFocus,
    ["SessionService.RemoveMetadata"] = game:GetService("SessionService").RemoveMetadata,
    ["SessionService.RemoveSession"] = game:GetService("SessionService").RemoveSession,
    ["SessionService.RemoveSessionsWithMetadataKey"] = game:GetService("SessionService").RemoveSessionsWithMetadataKey,
    ["SessionService.ReplaceSession"] = game:GetService("SessionService").ReplaceSession,
    ["SessionService.SessionExists"] = game:GetService("SessionService").SessionExists,
    ["SessionService.SetMetadata"] = game:GetService("SessionService").SetMetadata,
    ["SessionService.SetSession"] = game:GetService("SessionService").SetSession,
    ["OmniRecommendationsService.ClearSessionId"] = game:GetService("OmniRecommendationsService").ClearSessionId,
    ["OmniRecommendationsService.MakeRequest"] = game:GetService("OmniRecommendationsService").MakeRequest,
    ["Players.ReportAbuse"] = game:GetService("Players").ReportAbuse,
    ["Players.ReportAbuseV3"] = game:GetService("Players").ReportAbuseV3,
    ["PlatformCloudStorageService.GetUserDataAsync"] = game:GetService("PlatformCloudStorageService").GetUserDataAsync,
    ["PlatformCloudStorageService.SetUserDataAsync"] = game:GetService("PlatformCloudStorageService").SetUserDataAsync,
    ["CoreGui.TakeScreenshot"] = game:GetService("CoreGui").TakeScreenshot,
    ["CoreGui.ToggleRecording"] = game:GetService("CoreGui").ToggleRecording,
    ["LinkingService.DetectUrl"] = game:GetService("LinkingService").DetectUrl,
    ["LinkingService.GetAndClearLastPendingUrl"] = game:GetService("LinkingService").GetAndClearLastPendingUrl,
    ["LinkingService.GetLastLuaUrl"] = game:GetService("LinkingService").GetLastLuaUrl,
    ["LinkingService.IsUrlRegistered"] = game:GetService("LinkingService").IsUrlRegistered,
    ["LinkingService.OpenUrl"] = game:GetService("LinkingService").OpenUrl,
    ["LinkingService.RegisterLuaUrl"] = game:GetService("LinkingService").RegisterLuaUrl,
    ["LinkingService.StartLuaUrlDelivery"] = game:GetService("LinkingService").StartLuaUrlDelivery,
    ["LinkingService.StopLuaUrlDelivery"] = game:GetService("LinkingService").StopLuaUrlDelivery,
    ["LinkingService.SupportsSwitchToSettingsApp"] = game:GetService("LinkingService").SupportsSwitchToSettingsApp,
    ["LinkingService.SwitchToSettingsApp"] = game:GetService("LinkingService").SwitchToSettingsApp,
    ["RbxAnalyticsService.GetSessionId"] = game:GetService("RbxAnalyticsService").GetSessionId,
    ["RbxAnalyticsService.ReleaseRBXEventStream"] = game:GetService("RbxAnalyticsService").ReleaseRBXEventStream,
    ["RbxAnalyticsService.SendEventDeferred"] = game:GetService("RbxAnalyticsService").SendEventDeferred,
    ["RbxAnalyticsService.SendEventImmediately"] = game:GetService("RbxAnalyticsService").SendEventImmediately,
    ["RbxAnalyticsService.SetRBXEvent"] = game:GetService("RbxAnalyticsService").SetRBXEvent,
    ["RbxAnalyticsService.SetRBXEventStream"] = game:GetService("RbxAnalyticsService").SetRBXEventStream,
    ["RbxAnalyticsService.TrackEvent"] = game:GetService("RbxAnalyticsService").TrackEvent,
    ["RbxAnalyticsService.TrackEventWithArgs"] = game:GetService("RbxAnalyticsService").TrackEventWithArgs,
    ["AvatarEditorService.NoPromptSetFavorite"] = game:GetService("AvatarEditorService").NoPromptSetFavorite,
    ["AvatarEditorService.NoPromptUpdateOutfit"] = game:GetService("AvatarEditorService").NoPromptUpdateOutfit,
    ["AvatarEditorService.PerformCreateOutfitWithDescription"] = game:GetService("AvatarEditorService").PerformCreateOutfitWithDescription,
    ["AvatarEditorService.PerformDeleteOutfit"] = game:GetService("AvatarEditorService").PerformDeleteOutfit,
    ["AvatarEditorService.PerformRenameOutfit"] = game:GetService("AvatarEditorService").PerformRenameOutfit,
    ["AvatarEditorService.PerformSaveAvatarWithDescription"] = game:GetService("AvatarEditorService").PerformSaveAvatarWithDescription,
    ["AvatarEditorService.PerformSetFavorite"] = game:GetService("AvatarEditorService").PerformSetFavorite,
    ["AvatarEditorService.PerformUpdateOutfit"] = game:GetService("AvatarEditorService").PerformUpdateOutfit,
    ["AvatarEditorService.PromptAllowInventoryReadAccess"] = game:GetService("AvatarEditorService").PromptAllowInventoryReadAccess,
    ["AvatarEditorService.PromptCreateOutfit"] = game:GetService("AvatarEditorService").PromptCreateOutfit,
    ["AvatarEditorService.PromptDeleteOutfit"] = game:GetService("AvatarEditorService").PromptDeleteOutfit,
    ["AvatarEditorService.PromptRenameOutfit"] = game:GetService("AvatarEditorService").PromptRenameOutfit,
    ["AvatarEditorService.PromptSaveAvatar"] = game:GetService("AvatarEditorService").PromptSaveAvatar,
    ["AvatarEditorService.PromptSetFavorite"] = game:GetService("AvatarEditorService").PromptSetFavorite,
    ["AvatarEditorService.PromptUpdateOutfit"] = game:GetService("AvatarEditorService").PromptUpdateOutfit,
    ["AvatarEditorService.SetAllowInventoryReadAccess"] = game:GetService("AvatarEditorService").SetAllowInventoryReadAccess,
    ["AvatarEditorService.SignalCreateOutfitFailed"] = game:GetService("AvatarEditorService").SignalCreateOutfitFailed,
    ["AvatarEditorService.SignalCreateOutfitPermissionDenied"] = game:GetService("AvatarEditorService").SignalCreateOutfitPermissionDenied,
    ["AvatarEditorService.SignalDeleteOutfitFailed"] = game:GetService("AvatarEditorService").SignalDeleteOutfitFailed,
    ["AvatarEditorService.SignalDeleteOutfitPermissionDenied"] = game:GetService("AvatarEditorService").SignalDeleteOutfitPermissionDenied,
    ["AvatarEditorService.SignalRenameOutfitFailed"] = game:GetService("AvatarEditorService").SignalRenameOutfitFailed,
    ["AvatarEditorService.SignalRenameOutfitPermissionDenied"] = game:GetService("AvatarEditorService").SignalRenameOutfitPermissionDenied,
    ["AvatarEditorService.SignalSaveAvatarPermissionDenied"] = game:GetService("AvatarEditorService").SignalSaveAvatarPermissionDenied,
    ["AvatarEditorService.SignalSetFavoriteFailed"] = game:GetService("AvatarEditorService").SignalSetFavoriteFailed,
    ["AvatarEditorService.SignalSetFavoritePermissionDenied"] = game:GetService("AvatarEditorService").SignalSetFavoritePermissionDenied,
    ["AvatarEditorService.SignalUpdateOutfitFailed"] = game:GetService("AvatarEditorService").SignalUpdateOutfitFailed,
    ["AvatarEditorService.SignalUpdateOutfitPermissionDenied"] = game:GetService("AvatarEditorService").SignalUpdateOutfitPermissionDenied,
    ["AvatarEditorService.NoPromptSaveAvatarThumbnailCustomization"] = game:GetService("AvatarEditorService").NoPromptSaveAvatarThumbnailCustomization,
    ["AvatarEditorService.NoPromptSaveAvatar"] = game:GetService("AvatarEditorService").NoPromptSaveAvatar,
    ["AvatarEditorService.NoPromptRenameOutfit"] = game:GetService("AvatarEditorService").NoPromptRenameOutfit,
    ["AvatarEditorService.NoPromptDeleteOutfit"] = game:GetService("AvatarEditorService").NoPromptDeleteOutfit,
    ["AvatarEditorService.NoPromptCreateOutfit"] = game:GetService("AvatarEditorService").NoPromptCreateOutfit,
    ["AvatarEditorService.NoPromptRenameOutfit"] = game:GetService("AvatarEditorService").NoPromptRenameOutfit,
}

local function test_rbx_function(func)
    local s,e = pcall(func)
    return s
end

local Vulnerabilities_Test = { 
    Passes = 0,
    Fails = 0,
    Running = 0
}

print("Executor Vulnerability Check - Executor: " .. tostring(identifyexecutor()))
print("✅ - Pass, ⛔ - Fail, ⏺️ - No test")

task.spawn(function()
    repeat game:GetService("RunService").Heartbeat:Wait() until Vulnerabilities_Test.Running == 0

    local rate = math.round(Vulnerabilities_Test.Passes / (Vulnerabilities_Test.Passes + Vulnerabilities_Test.Fails) * 100)
    local outOf = Vulnerabilities_Test.Passes .. " out of " .. (Vulnerabilities_Test.Passes + Vulnerabilities_Test.Fails)
    print("Vulnerability Mitigation Test Summary - " .. tostring(identifyexecutor()))
    print("✅ Tested with a " .. rate .. "% vulnerability mitigation rate (" .. outOf .. ")")
    print("⛔ " .. Vulnerabilities_Test.Fails .. " vulnerabilities not mitigated")
end)

for methodName,v in vulnerable_rbx_functions do 
    Vulnerabilities_Test.Running += 1
    if test_rbx_function(v) then 
        Vulnerabilities_Test.Fails += 1
        warn("⛔ " .. methodName .. " failed: Your executor was able to call this function")
    else 
        Vulnerabilities_Test.Passes += 1
        print("✅ " .. methodName)
    end
    Vulnerabilities_Test.Running -= 1
end
